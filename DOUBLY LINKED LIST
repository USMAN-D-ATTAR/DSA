#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;
};

class DoublyCircularLinkedList {
    Node* head;
public:
    DoublyCircularLinkedList() {
        head = NULL;
    }
    void insertAtBeginning(int x) {
        Node* newNode = new Node();
        newNode->data = x;
        if (head == NULL) {
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            newNode->next = head;
            newNode->prev = head->prev;
            head->prev->next = newNode;
            head->prev = newNode;
            head = newNode;
        }
    }
    void insertAtEnd(int x) {
        Node* newNode = new Node();
        newNode->data = x;
        if (head == NULL) {
            head = newNode;
            newNode->next = newNode;
            newNode->prev = newNode;
        } else {
            newNode->next = head;
            newNode->prev = head->prev;
            head->prev->next = newNode;
            head->prev = newNode;
        }
    }
    void deleteAtBeginning() {
        if (head == NULL) {
            cout << "List is empty." << endl;
            return;
        }
        if (head->next == head) {
            delete head;
            head = NULL;
        } else {
            head->prev->next = head->next;
            head->next->prev = head->prev;
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
    void deleteAtEnd() {
        if (head == NULL) {
            cout << "List is empty." << endl;
            return;
        }
        if (head->next == head) {
            delete head;
            head = NULL;
        } else {
            Node* temp = head->prev;
            temp->prev->next = head;
            head->prev = temp->prev;
            delete temp;
        }
    }
    void printList() {
        if (head == NULL) {
            cout << "List is empty." << endl;
            return;
        }
        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    DoublyCircularLinkedList dll;
    dll.insertAtEnd(10);
    dll.insertAtEnd(20);
    dll.insertAtEnd(30);
    dll.printList();
    dll.insertAtBeginning(5);
    dll.printList();
    dll.deleteAtBeginning();
    dll.printList();
    dll.deleteAtEnd();
    dll.printList();
    return 0;
}
